{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This page is intended to serve as a guide to the server infrastructure of the HKN Beta chapter, created at the end of Spring 2024.  Our intention is that this documentation provides the necessary instititional knowledge to maintain and expand the server infrastructure of our chapter.</p>"},{"location":"#philosophy","title":"Philosophy","text":"<p>In short - keep it simple, but document everything.</p>"},{"location":"development/","title":"Edit documentation","text":"<p>This documentation is written in Markdown, a simple markup language that is easy to read and write.  If you're not familiar with Markdown, you can find a guide here.</p>"},{"location":"development/#set-up-your-environment","title":"Set up your environment","text":"<p>First, ensure that you have access to edit the <code>hknbeta</code> repository on GitHub.  If you don't have access, ask the current facilities/IT director to add you as a collaborator.</p> <p>Clone the <code>hknbeta</code> repository to your local machine.  You can do this by running the following command in your terminal.  Use the SSH URL to make it easier on yourself to push changes.</p> <pre><code>git clone git@github.com:HKN-Beta/hknbeta\n</code></pre>"},{"location":"development/#install-mkdocs-for-local-development","title":"Install <code>mkdocs</code> for local development","text":"<p>Install the <code>mkdocs</code> and <code>mkdocs-material</code> packages so that you can preview your changes locally.  You can do this by running the following command in your terminal.</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre> <p>If you're on certain distributions of Linux that do not permit installing packages system-wide, you may need to first initialize a virtual environment.  You can do this by running the following command in your terminal.</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n# then install the packages\npip install mkdocs mkdocs-material\n</code></pre>"},{"location":"development/#install-mkdocs-for-deployment","title":"Install <code>mkdocs</code> for deployment","text":"<p>You will also need to install the <code>gh-deploy</code> plugin for <code>mkdocs</code> so that you can deploy your changes to the documentation website.  You can do this by running the following command in your terminal.</p> <pre><code>sudo apt install mkdocs mkdocs-material\n</code></pre> <p>(Author did not test using the Python packages, but if it exists, that should also work, in case you're not on apt-based Linux.)</p>"},{"location":"development/#make-your-changes","title":"Make your changes","text":"<p>Navigate to the <code>docs</code> directory in the <code>hknbeta</code> repository.  You can make changes to any of the Markdown files in this directory.  You can also add new files if you need to, including images or GIFs to embed into your Markdown.</p>"},{"location":"development/#preview-your-changes-locally","title":"Preview your changes locally","text":"<p>If you installed <code>mkdocs</code> and <code>mkdocs-material</code>, you can preview your changes by running the following command in your terminal.</p> <pre><code>mkdocs serve\n</code></pre> <p>This will start a local server that you can access by navigating to the URL that gets printed out.</p>"},{"location":"development/#push-your-changes","title":"Push your changes","text":"<p>Once you're satisfied with your changes, you can use mkdocs to build the documentation site and push your changes to the repository.  You can do this by running the following commands in your terminal.</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>That's it!</p>"},{"location":"development/#view-your-changes-on-the-updated-page","title":"View your changes on the updated page","text":"<p>Once you've pushed your changes, you can navigate to the documentation website to see your changes live.  If you don't see your changes, try refreshing the page.  Changes will take a long time to render, so we highly suggest previewing your changes locally before pushing them.</p>"},{"location":"services/","title":"Traefik Services","text":""},{"location":"services/#overview","title":"Overview","text":"<p>hknbeta makes use of Traefik, a reverse proxy and load balancer, to route incoming requests to the appropriate service.</p> <p>The services as handled by Traefik form the HKN infrastructure on hknbeta.  Traefik is configured to route incoming requests to the appropriate service based on the URL path.  For example, the frontend page for the POS service served at /pos comes from the <code>storefront</code> Docker image, built from HKN-Beta/hknpos-frontend.</p> <p>Each HKN service has an associated GitHub repository, configured to run GitHub Actions on push.  The pushed code is built into a Docker image and deployed to the server via GitHub Actions.  </p> <p>Currently, Traefik will not automatically route requests to a service unless the service is running.  This means that if you push a new service to the server, you will need to restart the Traefik service to get it to recognize the new service.  This is a security measure intended to avoid trigger-happy developers from accidentally exposing a service to the internet before it's ready!</p> <p>For more mission-critical containers like the POS, pushes to <code>main</code> are protected.  Any attempt to modify POS code requires review from the facilities director or IT committee before it is merged into main and pushed to hknbeta.</p> <p>Each page under this section describe the development and deployment process for each service under Traefik.</p>"},{"location":"services/#managing-traefik","title":"Managing Traefik","text":"<p>Traefik itself is a Docker container, which manages the other Docker containers when a docker-compose file is written to include the other services.  The Traefik container is configured to listen on ports 80 and 443, and to route incoming requests to the appropriate service based on the URL path.</p> <p>To restart the Traefik service on hknbeta, you can run the following commands in your terminal after cd'ing to the <code>~/traefik</code> directory.</p> <pre><code>docker compose down\ndocker compose --env-file default.env up -d\n</code></pre> <p>You can also use</p> <pre><code>docker compose --env-file default.env restart\n</code></pre> <p>Note that there is no hyphen between <code>docker</code> and <code>compose</code>.</p> <p>The <code>default.env</code> file contains passwords for PostgreSQL.  To avoid having to deal with stored passwords, you should minimize exposed ports to the Internet and let Traefik handle the routing.</p>"},{"location":"services/#restarting-one-specific-service","title":"Restarting one specific service","text":"<p>If you need to restart one specific service, you can run the following command in your terminal after cd'ing to the <code>~/traefik</code> directory.</p> <pre><code>docker compose restart &lt;service_name&gt;\n</code></pre>"},{"location":"services/#ssl-certificates","title":"SSL certificates","text":"<p>The docker-compose.yml and traefik.yml files are configured to automatically fetch and/or renew SSL certificates from Let's Encrypt using the ACME protocol.  This means that you don't need to worry about SSL certificates for your service, as long as it's running under Traefik.</p>"},{"location":"services/frontend/","title":"Frontend/<code>storefront</code>","text":"<p>The <code>storefront</code> is the part of the point-of-sale software that members interact with daily.  It offers the following interfaces:  - Regular POS interface where customers can purchase things, with cash or tabs. - Manage customer tabs - creation or updation. - Manage inventory - add, remove, or update items. - Create special orders for the ECE department or other special events. - Report statistics on sales, inventory, and other metrics.</p> <p>The storefront was written in Nuxt, and the code is hosted on GitHub at HKN-Beta/storefront.  The storefront can be accessed by navigating to the website at <code>/pos</code>.</p>"},{"location":"services/frontend/#development-instructions","title":"Development instructions","text":""},{"location":"services/frontend/#set-up-your-environment","title":"Set up your environment","text":"<p>After cloning the <code>storefront</code> repository to your local machine, you can install the necessary dependencies by simply running <code>npm i</code>.  This will install all the necessary packages to run the storefront locally.</p>"},{"location":"services/frontend/#run-the-storefront-locally","title":"Run the storefront locally","text":"<p>You can run the storefront locally by running <code>npm run dev</code>.  This will start a local server that you can access by navigating to the URL that gets printed out.</p> <p>To ensure separation of development \"orders\" from real ones, the backend URL must be set to something other than the hknbeta website.  Creating your own Medusa backend is your best bet.  You can do this by setting the <code>MEDUSA_BACKEND</code> environment variable to the URL of your Medusa backend when executing <code>npm run dev</code>.</p>"},{"location":"services/frontend/#push-your-changes","title":"Push your changes","text":"<p>Pushing your changes to <code>main</code>, currently, will automatically build and deploy a Docker image with the compiled storefront to hknbeta, but not automatically deploy it.  This is a security measure to ensure that the storefront is not accidentally exposed to the internet before it's ready.  You will need to manually restart the Traefik service to get it to recognize the new storefront.</p> <p>As we re-enter regular semesters, we'll increase restrictions to ensure no one can just push code to <code>main</code> without careful review.</p>"}]}